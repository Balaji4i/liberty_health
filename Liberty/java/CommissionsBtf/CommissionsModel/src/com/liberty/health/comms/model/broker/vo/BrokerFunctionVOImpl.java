package com.liberty.health.comms.model.broker.vo;

import com.core.model.vo.classes.CoreViewObjectImpl;
import com.core.utils.DateConversionUtil;
import com.core.utils.DateUtils;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 26 13:51:30 CAT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BrokerFunctionVOImpl extends CoreViewObjectImpl implements com.liberty.health.comms.model.broker.vo.common.BrokerFunctionVO {
    /**
     * This is the default constructor (do not remove).
     */
    public BrokerFunctionVOImpl() {
    }

    /**
     * Returns the variable value for pCurrentDate.
     * @return variable value for pCurrentDate
     */
    public Date getpCurrentDate() {
        return (Date) ensureVariableManager().getVariableValue("pCurrentDate");
    }

    /**
     * Sets <code>value</code> for variable pCurrentDate.
     * @param value value to bind as pCurrentDate
     */
    public void setpCurrentDate(Date value) {
        ensureVariableManager().setVariableValue("pCurrentDate", value);
    }

    public void updateEffDates(Integer brokerIdNo, Date currentDate) {
        
        
        
        
        System.out.println("Broker Function Update End Date "+ brokerIdNo+"," +currentDate);
        
        FacesContext fc = FacesContext.getCurrentInstance();
        String viewCriteriaName = "CurrentBrokerAttributesViewCriteria";
        BrokerFunctionVOImpl vo = (BrokerFunctionVOImpl) this.getViewObject();
        
        
        Row functionRow            = vo.getCurrentRow();
        
        Date effectiveStartDate   = (Date) functionRow.getAttribute("EffectiveStartDate");
        Date effectiveEndDate     = (Date) functionRow.getAttribute("EffectiveEndDate");
        Integer currTableIdNo     = (Integer) functionRow.getAttribute("BrokerTableIdNo");
        
        //added check for the broker table type id cannot be set to 0
        // raise error if any of the rows evaluate to 0 and do not allow the save
        
        if (currTableIdNo == 0) {
            FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "Please ensure that the Table Description is valid");
            fc.addMessage(null, message);  
        } else
              
        {
            ViewCriteria vc = vo.getViewCriteria(viewCriteriaName);
            vo.removeViewCriteria(viewCriteriaName);
            vc.resetCriteria();
            vo.applyViewCriteria(vc);
            
            vo.setNamedWhereClauseParam("pBrokerIdNo", brokerIdNo);
            vo.setNamedWhereClauseParam("pCurrentDate", "");
    
            vo.setSortBy("BrokerIdNo, BrokerTableIdNo, EffectiveStartDate desc");
            vo.executeQuery();
    
            RowSetIterator rowIt = vo.createRowSetIterator(null);
            rowIt.reset();
    
            Date startDate = DateUtils.getLibertyMinDate();
            Integer brokerNo = 0;
            Integer brokerTableNo = 0;
    
            while (rowIt.hasNext()) {
    
                BrokerFunctionVORowImpl row = (BrokerFunctionVORowImpl) rowIt.next();
                System.out.println("Row "+row.getBrokerIdNo()+","+row.getBrokerTableIdNo()+","+row.getBrokerTableTypeIdNo());
                System.out.println("Row - in new effective date section existing broker table id no "+row.getBrokerTableIdNo().toString());
             if (row.getBrokerTableTypeIdNo() == 0) {
                  FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "Please ensure that the Table Description is valid");
                  fc.addMessage(null, message);    
             } else   
             {   
                Date endDate = row.getEffectiveEndDate();
                Date newEndDate = DateUtils.getLibertyMaxDate();
                
                //check the effective start date and the brokertableidno
                System.out.println("Row - in new effective date section existing broker table id no "+row.getBrokerTableIdNo().toString());
                System.out.println("Row - in new effective date section existing broker table id no "+currTableIdNo.toString());
                if (row.getBrokerTableIdNo().equals(currTableIdNo)) {
                    //if the effective start date is the same then this is the new record
                    if (row.getEffectiveStartDate().equals(effectiveStartDate)) {

                            System.out.println("this is a new record update the end date");
                            row.setEffectiveEndDate(newEndDate);
                      
                       
                    } else {
                        System.out.println("setting the effective end date for the prior record");
                        row.setEffectiveEndDate(DateConversionUtil.subtractDays(effectiveStartDate, 1));
                    }
                    
                }
                    
                
                /*if (brokerNo.compareTo(row.getBrokerIdNo()) != 0 &&
                    brokerTableNo.compareTo(row.getBrokerTableIdNo()) != 0) {
                    row.setEffectiveEndDate(newEndDate);
                    System.out.println("Setting end date " + newEndDate);
                } else if (endDate != newEndDate) {
                    row.setEffectiveEndDate(DateConversionUtil.subtractDays(startDate, 1));
                    System.out.println("Setting end date " + DateConversionUtil.subtractDays(startDate, 1));
                }*/
                brokerNo = row.getBrokerIdNo();
                startDate = row.getEffectiveStartDate();
                brokerTableNo = row.getBrokerTableIdNo();
             }  
            }
            rowIt.closeRowSetIterator();
            this.getDBTransaction().commit();
            
            vo.removeViewCriteria(viewCriteriaName);
            vc.resetCriteria();
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("pBrokerIdNo", brokerIdNo);
            vo.setNamedWhereClauseParam("pCurrentDate", currentDate);
            vo.executeQuery();
        }     
    }

    /**
     * Returns the variable value for pBrokerIdNo.
     * @return variable value for pBrokerIdNo
     */
    public Integer getpBrokerIdNo() {
        return (Integer) ensureVariableManager().getVariableValue("pBrokerIdNo");
    }

    /**
     * Sets <code>value</code> for variable pBrokerIdNo.
     * @param value value to bind as pBrokerIdNo
     */
    public void setpBrokerIdNo(Integer value) {
        ensureVariableManager().setVariableValue("pBrokerIdNo", value);
        this.executeQuery();
        System.out.println("setting the broker id no"+value);
    }


}


