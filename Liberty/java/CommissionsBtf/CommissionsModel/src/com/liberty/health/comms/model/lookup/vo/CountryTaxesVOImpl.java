package com.liberty.health.comms.model.lookup.vo;

import com.core.model.vo.classes.CoreViewObjectImpl;

import com.core.utils.DateConversionUtil;
import com.core.utils.DateUtils;

import com.liberty.health.comms.model.broker.vo.BrokerFunctionVOImpl;
import com.liberty.health.comms.model.broker.vo.BrokerFunctionVORowImpl;
import com.liberty.health.comms.model.lookup.vo.common.CountryTaxesVO;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 21 09:55:52 CAT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CountryTaxesVOImpl extends CoreViewObjectImpl implements CountryTaxesVO {
    /**
     * This is the default constructor (do not remove).
     */
    public CountryTaxesVOImpl() {
    }

    /**
     * Returns the variable value for pCountryCode.
     * @return variable value for pCountryCode
     */
    public String getpCountryCode() {
        return (String) ensureVariableManager().getVariableValue("pCountryCode");
    }

    /**
     * Sets <code>value</code> for variable pCountryCode.
     * @param value value to bind as pCountryCode
     */
    public void setpCountryCode(String value) {
        ensureVariableManager().setVariableValue("pCountryCode", value);
    }
    
    public void updateEffDates(String countryCode) {

        System.out.println("Country Taxes Update End Date "+ countryCode);
        
        FacesContext fc         = FacesContext.getCurrentInstance();
        String viewCriteriaName = "CountryTaxesVOCriteria";
        CountryTaxesVOImpl      vo = (CountryTaxesVOImpl) this.getViewObject();
        
        
        Row functionRow            = vo.getCurrentRow();
        
        Date effectiveStartDate   = (Date) functionRow.getAttribute("EffectiveStartDate");
        Date effectiveEndDate     = (Date) functionRow.getAttribute("EffectiveEndDate");
        
      
        ViewCriteria vc = vo.getViewCriteria(viewCriteriaName);
        vo.removeViewCriteria(viewCriteriaName);
        vc.resetCriteria();
        vo.applyViewCriteria(vc);
            
        vo.setNamedWhereClauseParam("pCountryCode", countryCode);
    
        vo.setSortBy("CountryCode,EffectiveStartDate desc");
        vo.executeQuery();
    
        RowSetIterator rowIt = vo.createRowSetIterator(null);
        rowIt.reset();
    
        Date startDate = DateUtils.getLibertyMinDate();
        Integer brokerNo = 0;
        Integer brokerTableNo = 0;
    
        while (rowIt.hasNext()) {
    
           CountryTaxesVORowImpl row = (CountryTaxesVORowImpl) rowIt.next();
           System.out.println("Row "+row.getCountryCode());
           System.out.println("Row - in new effective date section effective start date "+row.getEffectiveStartDate());
           
           Date endDate = row.getEffectiveEndDate();
           Date newEndDate = DateUtils.getLibertyMaxDate();
                
           //check the effective start date and the brokertableidno
           System.out.println("Row - in new effective date section the effective start date is "+row.getEffectiveStartDate());
           //if the effective start date is the same then this is the new record
           if (row.getEffectiveStartDate().equals(effectiveStartDate)) {

              System.out.println("this is a new record update the end date");
              row.setEffectiveEndDate(newEndDate);
                      
                       
           } else {
              System.out.println("setting the effective end date for the prior record");
              row.setEffectiveEndDate(DateConversionUtil.subtractDays(effectiveStartDate, 1));
           }
                    
             countryCode = row.getCountryCode();
             startDate = row.getEffectiveStartDate();
             
            }
            rowIt.closeRowSetIterator();
            this.getDBTransaction().commit();
            
            vo.removeViewCriteria(viewCriteriaName);
            vc.resetCriteria();
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("pCountryCode", countryCode);
            vo.executeQuery();
            
    }

    /**
     * Returns the bind variable value for pCountryList.
     * @return bind variable value for pCountryList
     */
    public String getpCountryList() {
        return (String) getNamedWhereClauseParam("pCountryList");
    }

    /**
     * Sets <code>value</code> for bind variable pCountryList.
     * @param value value to bind as pCountryList
     */
    public void setpCountryList(String value) {
        setNamedWhereClauseParam("pCountryList", value);
    }
}

