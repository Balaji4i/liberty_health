package com.liberty.health.comms.model.payment.services;

import com.core.model.services.classes.CoreApplicationModuleImpl;
import com.core.model.vo.classes.CoreViewObjectImpl;

import com.core.utils.ADFUtils;

import com.liberty.health.comms.model.comms.views.CommsDMSnapshotVOImpl;
import com.liberty.health.comms.model.comms.views.CommsPaymentsArchivedVOImpl;
import com.liberty.health.comms.model.payment.services.common.PaymentAM;

import com.liberty.health.comms.model.payment.vo.BrokPaymentsAdjustVOImpl;
import com.liberty.health.comms.model.payment.vo.CommissionPaymentsPerGroupImpl;
import com.liberty.health.comms.model.payment.vo.FusionPayablesInterfaceVOImpl;
import com.liberty.health.comms.model.payment.vo.InvoiceAdjustVOImpl;
import com.liberty.health.comms.model.payment.vo.InvoiceVOImpl;
import com.liberty.health.comms.model.payment.vo.InvoicesByCompanyRoViewImpl;
import com.liberty.health.comms.model.payment.vo.InvoicesPaidWhtVOImpl;
import com.liberty.health.comms.model.payment.vo.SearchPaymentRoViewImpl;



import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Calendar;

import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;

import oracle.jbo.JboException;
import oracle.jbo.server.ViewLinkImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 14 11:49:48 CAT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PaymentAMImpl extends CoreApplicationModuleImpl implements PaymentAM {
    
    private static int VARCHAR = Types.VARCHAR;
    
    /**
     * This is the default constructor (do not remove).
     */
    public PaymentAMImpl() {
    }

    /**
     * Container's getter for InvoiceByPkView.
     * @return InvoiceByPkView
     */
    public InvoiceVOImpl getInvoiceByPkView() {
        return (InvoiceVOImpl) findViewObject("InvoiceByPkView");
    }

    /**
     * Container's getter for AllInvoiceView.
     * @return AllInvoiceView
     */
    public InvoiceVOImpl getAllInvoiceView() {
        return (InvoiceVOImpl) findViewObject("AllInvoiceView");
    }

    /**
     * Container's getter for InvoiceDetailView.
     * @return InvoiceDetailView
     */
    public CoreViewObjectImpl getInvoiceDetailView() {
        return (CoreViewObjectImpl) findViewObject("InvoiceDetailView");
    }

    /**
     * Container's getter for InvoiceDetailByInvoiceView.
     * @return InvoiceDetailByInvoiceView
     */
    public CoreViewObjectImpl getInvoiceDetailByInvoiceView() {
        return (CoreViewObjectImpl) findViewObject("InvoiceDetailByInvoiceView");
    }

    /**
     * Container's getter for InvoiceDetailFkLink2.
     * @return InvoiceDetailFkLink2
     */
    public ViewLinkImpl getInvoiceDetailFkLink2() {
        return (ViewLinkImpl) findViewLink("InvoiceDetailFkLink2");
    }

    /**
     * Container's getter for InvoiceDetailFkLink1.
     * @return InvoiceDetailFkLink1
     */
    public ViewLinkImpl getInvoiceDetailFkLink1() {
        return (ViewLinkImpl) findViewLink("InvoiceDetailFkLink1");
    }
    
    public void submitFusionPayablesRecon (
                                            String fromDate,
                                            String toDate
                                           ) {
            java.sql.Date currDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
            String jobName         = "FUSION_PAYABLES_INTERFACE";
            
            /*create the job */
            this.createJob(jobName, "PLSQL_BLOCK", 
                                     "BEGIN LHHCOM.COMMISSIONS_PKG.fetch_fusion_payables_int("+"\'"+fromDate+"\'"+","
                                                                                              +"\'"+toDate+"\'"+");END;",
                                     currDate, 0, "Submitting job for Fusion Payables Interface Reconciliation Run");       
                    
            
            
              this.enableDbJob(jobName); 
        }

    public String executePaymentRun(Integer invoiceNo, Integer companyIdNo, String countryCode, String username) {
        String sqlStmnt = null;
        CallableStatement cs = null;
        String result = null;
        String newCompanyIdNo = null;;
        String newInvoiceno   = null;
        
        System.out.println("I am in the execute payment run class in payment AMIMpl");
        
       if (invoiceNo != null) {
            newInvoiceno = Integer.toString(invoiceNo);
        }
        
        if (companyIdNo != null) {
            newCompanyIdNo = Integer.toString(companyIdNo);
        } else {
            newCompanyIdNo = "";
        }
        if (countryCode == null) {
            System.out.println("setting country code to emptystring");
            countryCode = "";
        }
        
        if (username == null) {
            username = "";
            System.out.println("setting username to emptystring");
        }
       
        
        System.out.println("values are "+"LHHCOM.comms_calc_pkg.execute_payment_run("
                                +"\'"+newInvoiceno+"\'"+","
                                +"\'"+newCompanyIdNo+"\'"+","
                                +"\'"+countryCode+"\'"+","
                                +"\'"+username+"\'"+")");
        System.out.println("after showing values now calling relevant create job");
        java.sql.Date currDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
        String jobName         = "EXECUTE_PAYMENT_RUN_"+newCompanyIdNo;
        
        System.out.println("values being passed to create job are ");
        System.out.println("values being passed to create job are - newInvoiceno "+newInvoiceno);
        System.out.println("values being passed to create job are - newCompanyIdNo"+newCompanyIdNo );
        System.out.println("values being passed to create job are - countryCode"+countryCode);
        System.out.println("values being passed to create job are - username "+username);

        /*create the job */
        this.createJob(jobName, "PLSQL_BLOCK", 
                                 "BEGIN LHHCOM.comms_calc_pkg.execute_payment_run("
                                            +newInvoiceno+","
                                            +"\'"+newCompanyIdNo+"\'"+","
                                            +"\'"+countryCode+"\'"+","
                                            +"\'"+username+"\'"+");END;",
                                 currDate, 0, "Submitting job for execute payment run");       
                
        
        
          this.enableDbJob(jobName); 
        

      /*  try {
            sqlStmnt =
                "BEGIN LHHCOM.comms_calc_pkg.execute_payment_run (PN_INVOICE_NO =>?, PN_COMPANY_ID_NO =>?, PV_COUNTRY_CODE =>?, PV_USERNAME =>?, PV_RETURN_MSG =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            //Set procedure paramaters
            if (invoiceNo != null) {
                cs.setInt(1, invoiceNo.intValue());
            } else {
                cs.setString(1, null);
            }
            if (companyIdNo != null) {
                cs.setInt(2, companyIdNo);
            } else {
                cs.setString(2, null);
            }
            if (countryCode != null) {
                cs.setString(3, countryCode);
            } else {
                cs.setString(3, null);
            }

            cs.setString(4, username);

            //Register out parameters
            cs.registerOutParameter(5, Types.VARCHAR);
            cs.execute();
            result = cs.getString(5);
        } catch (SQLException e) {
            e.printStackTrace();
            e.getLocalizedMessage();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }*/
        return result;
    }
    
    public void createJob(String jobName, String jobType, String jobAction, Date startDate, int numArguments, String comments) {
        /*first create the job */
        String sqlStmnt      = null;
        CallableStatement cs = null; 
        try {
            sqlStmnt =
                "BEGIN LHHCOM.commissions_pkg.create_job (p_job_name =>?, p_job_type =>?, p_job_action =>?, p_start_date =>?,p_no_arguments =>?, p_comments =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            cs.setString(1, jobName);
            cs.setString(2, jobType);
            cs.setString(3, jobAction);
            cs.setDate(4, startDate);
            cs.setInt(5, numArguments);
            cs.setString(6, comments);
            
            cs.execute();
            
            } catch (SQLException e) {
                e.printStackTrace();
                e.getLocalizedMessage();
            } finally {
                if (cs != null) {
                    try {
                        cs.close();
                    } catch (SQLException e) {
                        throw new JboException(e);
                    }
                }
            }
    }
    
    public void enableDbJob (String jobName){
        String sqlStmnt      = null;
        CallableStatement cs = null; 
        
        System.out.println("before execute enable job "+jobName);
        try {
            sqlStmnt =
                "BEGIN LHHCOM.commissions_pkg.enable_job (p_job_name =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            cs.setString(1, jobName);   
            cs.execute();
        
        } catch (SQLException e) {
        e.printStackTrace();
        e.getLocalizedMessage();
        } finally {
        if (cs != null) {
            try {
                cs.close();
            } catch (SQLException e) {
                throw new JboException(e);
            }
        }
        }
    }

    /**
     * Container's getter for SearchPaymentRoView1.
     * @return SearchPaymentRoView1
     */
    public SearchPaymentRoViewImpl getSearchPaymentRoView() {
        return (SearchPaymentRoViewImpl) findViewObject("SearchPaymentRoView");
    }

    /**
     * Container's getter for InvoicesByCompanyRoView1.
     * @return InvoicesByCompanyRoView1
     */
    public InvoicesByCompanyRoViewImpl getAllInvoivesByCompanyView() {
        return (InvoicesByCompanyRoViewImpl) findViewObject("AllInvoivesByCompanyView");
    }

    /**
     * Container's getter for InvoicesPaidWhtVO1.
     * @return InvoicesPaidWhtVO1
     */
    public InvoicesPaidWhtVOImpl getInvoicesPaidWhtView() {
        return (InvoicesPaidWhtVOImpl) findViewObject("InvoicesPaidWhtView");
    }

    /**
     * Container's getter for InvoicesPaidWhtVO1.
     * @return InvoicesPaidWhtVO1
     */
    public InvoicesPaidWhtVOImpl getInvoicesPaidWhtVO1() {
        return (InvoicesPaidWhtVOImpl) findViewObject("InvoicesPaidWhtVO1");
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try { // 1. Create a JDBC CallabledStatement
                st = getDBTransaction().createCallableStatement("BEGIN ? := " + stmt + ";END;", 0);
                // 2. Register the first bind variable for the return value
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) { // 3. Loop over values for the bind variables passed in, if any
                    for (int z = 0; z < bindVars.length; z++) {
                        // 4. Set the value of user-supplied bind vars in the stmt
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                // 5. Set the value of user-supplied bind vars in the stmt
                st.executeUpdate();
                // 6. Return the value of the first bind variable
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }


    /**
     * Container's getter for CommissionPaymentsPerGroup1.
     * @return CommissionPaymentsPerGroup1
     */
    public CommissionPaymentsPerGroupImpl getCommissionPaymentsPerGroupVO1() {
        return (CommissionPaymentsPerGroupImpl) findViewObject("CommissionPaymentsPerGroupVO1");
    }

    /**
     * Container's getter for FusionPayablesInterface1.
     * @return FusionPayablesInterface1
     */
    public FusionPayablesInterfaceVOImpl getFusionPayablesInterfaceVO1() {
        return (FusionPayablesInterfaceVOImpl) findViewObject("FusionPayablesInterfaceVO1");
    }


    /**
     * Container's getter for InvoiceAdjust1.
     * @return InvoiceAdjust1
     */
    public InvoiceAdjustVOImpl getInvoiceAdjust1() {
        return (InvoiceAdjustVOImpl) findViewObject("InvoiceAdjust1");
    }

    /**
     * Container's getter for InvoiceAdjust2.
     * @return InvoiceAdjust2
     */
    public InvoiceAdjustVOImpl getInvoiceAdjust2() {
        return (InvoiceAdjustVOImpl) findViewObject("InvoiceAdjust2");
    }

    /**
     * Container's getter for InvoiceDetail1.
     * @return InvoiceDetail1
     */
    public CoreViewObjectImpl getInvoiceDetail1() {
        return (CoreViewObjectImpl) findViewObject("InvoiceDetail1");
    }

    /**
     * Container's getter for InvoiceAdjustDetailFkLink.
     * @return InvoiceAdjustDetailFkLink
     */
    public ViewLinkImpl getInvoiceAdjustDetailFkLink() {
        return (ViewLinkImpl) findViewLink("InvoiceAdjustDetailFkLink");
    }

    /**
     * Container's getter for BrokPaymentsAdjust1.
     * @return BrokPaymentsAdjust1
     */
    public BrokPaymentsAdjustVOImpl getBrokPaymentsAdjust1() {
        return (BrokPaymentsAdjustVOImpl) findViewObject("BrokPaymentsAdjust1");
    }

    /**
     * Container's getter for CommsDMSnapshot1.
     * @return CommsDMSnapshot1
     */
    public CommsDMSnapshotVOImpl getCommsDMSnapshot1() {
        return (CommsDMSnapshotVOImpl) findViewObject("CommsDMSnapshot1");
    }

    /**
     * Container's getter for CommsCalcSnapShotN1.
     * @return CommsCalcSnapShotN1
     */
    public CoreViewObjectImpl getCommsCalcSnapShotN1() {
        return (CoreViewObjectImpl) findViewObject("CommsCalcSnapShotN1");
    }

    /**
     * Container's getter for CommsPaymentsArchived1.
     * @return CommsPaymentsArchived1
     */
    public CommsPaymentsArchivedVOImpl getCommsPaymentsArchived1() {
        return (CommsPaymentsArchivedVOImpl) findViewObject("CommsPaymentsArchived1");
    }

    /**
     * Container's getter for ViewLink.
     * @return ViewLink
     */
    public ViewLinkImpl getViewLink() {
        return (ViewLinkImpl) findViewLink("ViewLink");
    }

    /**
     * Container's getter for CommsPaymentsReceivedFkAssoc1Link.
     * @return CommsPaymentsReceivedFkAssoc1Link
     */
    public ViewLinkImpl getCommsPaymentsReceivedFkAssoc1Link() {
        return (ViewLinkImpl) findViewLink("CommsPaymentsReceivedFkAssoc1Link");
    }
}

