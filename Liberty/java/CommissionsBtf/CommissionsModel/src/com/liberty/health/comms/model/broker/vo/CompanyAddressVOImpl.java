package com.liberty.health.comms.model.broker.vo;

import com.core.model.vo.classes.CoreViewObjectImpl;
import com.core.utils.DateConversionUtil;
import com.core.utils.DateUtils;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 15 14:26:33 CAT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CompanyAddressVOImpl extends CoreViewObjectImpl implements com.liberty.health.comms.model.broker.vo.common.CompanyAddressVO {
    /**
     * This is the default constructor (do not remove).
     */
    public CompanyAddressVOImpl() {
    }

    /**
     * Returns the variable value for pCompanyIdNo.
     * @return variable value for pCompanyIdNo
     */
    public Integer getpCompanyIdNo() {
        return (Integer) ensureVariableManager().getVariableValue("pCompanyIdNo");
    }

    /**
     * Sets <code>value</code> for variable pCompanyIdNo.
     * @param value value to bind as pCompanyIdNo
     */
    public void setpCompanyIdNo(Integer value) {
        ensureVariableManager().setVariableValue("pCompanyIdNo", value);
    }

    /**
     * Returns the variable value for pCountryCode.
     * @return variable value for pCountryCode
     */
    public String getpCountryCode() {
        return (String) ensureVariableManager().getVariableValue("pCountryCode");
    }

    /**
     * Sets <code>value</code> for variable pCountryCode.
     * @param value value to bind as pCountryCode
     */
    public void setpCountryCode(String value) {
        ensureVariableManager().setVariableValue("pCountryCode", value);
    }

    /**
     * Returns the variable value for pvAddressTypeCode.
     * @return variable value for pvAddressTypeCode
     */
    public String getpvAddressTypeCode() {
        return (String) ensureVariableManager().getVariableValue("pvAddressTypeCode");
    }

    /**
     * Sets <code>value</code> for variable pvAddressTypeCode.
     * @param value value to bind as pvAddressTypeCode
     */
    public void setpvAddressTypeCode(String value) {
        ensureVariableManager().setVariableValue("pvAddressTypeCode", value);
    }


    /**
     *Method sets all bind variables required for View Criteria and executes query
     * @param companyIdNo
     * @param countryCode
     * @param addressTypeCode
     */
    public void setByPrimaryKeyViewCriteria(Integer companyIdNo, String countryCode, String addressTypeCode) {
        this.setpCompanyIdNo(companyIdNo);
        this.setpvAddressTypeCode(addressTypeCode);
        this.setpCountryCode(countryCode);
        this.executeQuery();
    }

    /**
     * Returns the variable value for pCurrentDate.
     * @return variable value for pCurrentDate
     */
    public Date getpCurrentDate() {
        return (Date) ensureVariableManager().getVariableValue("pCurrentDate");
    }

    /**
     * Sets <code>value</code> for variable pCurrentDate.
     * @param value value to bind as pCurrentDate
     */
    public void setpCurrentDate(Date value) {
        ensureVariableManager().setVariableValue("pCurrentDate", value);
    }


    public void updateEffDates(Integer compIdNo, String countryCode, Date currentDate) {
        String viewCriteriaName = "CompanyAddressByTypeViewCriteria";
        CompanyAddressVOImpl vo = (CompanyAddressVOImpl) this.getViewObject();
        
        Row address              = vo.getCurrentRow();
        
        
        Date effectiveStartDate   = (Date) address.getAttribute("EffectiveStartDate");
        Date effectiveEndDate     = (Date) address.getAttribute("EffectiveEndDate");
        String currAddressType      = (String) address.getAttribute("AddressTypeCode");
            
        
        java.sql.Date currDateSql  = DateConversionUtil.convertToJSDate(DateUtils.currentDateTruncated());
        java.sql.Date checkEndDate = DateConversionUtil.convertToJSDate(effectiveEndDate);
        java.sql.Date checkStartDate = DateConversionUtil.convertToJSDate(effectiveStartDate);

        ViewCriteria vc = vo.getViewCriteria(viewCriteriaName);
        vo.removeViewCriteria(viewCriteriaName);
        vc.resetCriteria();
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("pCompanyIdNo", compIdNo);
        vo.setNamedWhereClauseParam("pCountryCode", countryCode);
        vo.setNamedWhereClauseParam("pCurrentDate", "");

        vo.setSortBy("CompanyIdNo, CountryCode, AddressTypeCode, EffectiveStartDate desc");
        vo.executeQuery();

        RowSetIterator rowIt = vo.createRowSetIterator(null);
        rowIt.reset();

       // Date startDate = DateUtils.getLibertyMinDate();
        Integer companyIdNo = 0;
        String cntryCode = "";
        String addressTypeCode = "";

        while (rowIt.hasNext()) {

            CompanyAddressVORowImpl row = (CompanyAddressVORowImpl) rowIt.next();
           // Date endDate = row.getEffectiveEndDate();
           java.sql.Date endDate = DateConversionUtil.convertToJSDate(row.getEffectiveEndDate());
           Date newEndDate = DateUtils.getLibertyMaxDate();
           Date startDate = row.getEffectiveStartDate();
            
           
           /**
            * T.Percy commented out old code added easier logic
            * check address for country and address type code only update the old record
            */
            
            System.out.println("current address type code "+currAddressType);
            System.out.println("row address type code "+row.getAddressTypeCode());
            
            System.out.println("current country code as passed in by call "+countryCode);
            System.out.println("row country code as through iterator "+row.getCountryCode());
            
            System.out.println("current start date "+checkStartDate);
            System.out.println("row start date "+startDate);
            
            System.out.println("current date "+currDateSql);
            System.out.println("row end date "+endDate);
                       
            if (currAddressType.equals(row.getAddressTypeCode()) && countryCode.equals(row.getCountryCode())) {
                if (startDate.equals(checkStartDate)) {
                    row.setEffectiveEndDate(newEndDate);
                } else if  (currDateSql.before(endDate))
                row.setEffectiveEndDate(DateConversionUtil.subtractDays(checkStartDate, 1));
                System.out.println("Setting end date " + DateConversionUtil.subtractDays(checkStartDate, 1));  
            }
            
            
           /*  if (companyIdNo.compareTo(row.getCompanyIdNo()) != 0 || cntryCode.compareTo(row.getCountryCode()) != 0 ||
                addressTypeCode.compareTo(row.getAddressTypeCode()) != 0) {
                
                if (startDate.equals(checkStartDate)) {
                    row.setEffectiveEndDate(newEndDate);
                }
                
            } else if (endDate != newEndDate) {
                row.setEffectiveEndDate(DateConversionUtil.subtractDays(startDate, 1));
                System.out.println("Setting end date " + DateConversionUtil.subtractDays(startDate, 1));
            }*/
            
            companyIdNo = row.getCompanyIdNo();
            startDate = row.getEffectiveStartDate();
            cntryCode = row.getCountryCode();
            addressTypeCode = row.getAddressTypeCode();
        }
        rowIt.closeRowSetIterator();
        this.getDBTransaction().commit();
        vo.removeViewCriteria(viewCriteriaName);
        vc.resetCriteria();
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("pCompanyIdNo", compIdNo);
        vo.setNamedWhereClauseParam("pCountryCode", countryCode);
        vo.setNamedWhereClauseParam("pCurrentDate", currentDate);
        vo.executeQuery();
    }


}

