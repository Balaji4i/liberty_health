package com.liberty.health.comms.model.broker.vo;

import com.core.model.vo.classes.CoreViewObjectImpl;

import com.core.utils.DateConversionUtil;
import com.core.utils.DateUtils;

import com.liberty.health.comms.model.broker.vo.common.CompanyContactCorrVO;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
import oracle.jbo.Row;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 16 10:16:06 CAT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CompanyContactCorrVOImpl extends CoreViewObjectImpl implements CompanyContactCorrVO {
    /**
     * This is the default constructor (do not remove).
     */
    public CompanyContactCorrVOImpl() {
    }
    
   

    /**
     * Returns the variable value for pCompanyIdNo.
     * @return variable value for pCompanyIdNo
     */
    public Integer getpCompanyIdNo() {
        return (Integer) ensureVariableManager().getVariableValue("pCompanyIdNo");
    }

    /**
     * Sets <code>value</code> for variable pCompanyIdNo.
     * @param value value to bind as pCompanyIdNo
     */
    public void setpCompanyIdNo(Integer value) {
        ensureVariableManager().setVariableValue("pCompanyIdNo", value);
    }

    /**
     * Returns the variable value for pCurrentDate.
     * @return variable value for pCurrentDate
     */
    public Date getpCurrentDate() {
        return (Date) ensureVariableManager().getVariableValue("pCurrentDate");
    }

    /**
     * Sets <code>value</code> for variable pCurrentDate.
     * @param value value to bind as pCurrentDate
     */
    public void setpCurrentDate(Date value) {
        ensureVariableManager().setVariableValue("pCurrentDate", value);
    }


    public void setCorrPrimaryKeyViewCriteria(Integer companyIdNo, Integer CompanyContactIdNo) {
            this.setpCompanyIdNo(companyIdNo);
            System.out.println("in setting the values for extracting information"); 
            this.executeQuery();
        }

    public void updateCorrEffDates(Integer compIdNo,  Date currentDate) {
            
           FacesContext fc = FacesContext.getCurrentInstance();
             
            String viewCriteriaName     = "CompanyContactCorrVOCriteria";
            CompanyContactCorrVOImpl vo = (CompanyContactCorrVOImpl) this.getViewObject();
            Row contactRow              = vo.getCurrentRow();
            
            Date effectiveStartDate   = (Date) contactRow.getAttribute("EffectiveStartDate");
            Date effectiveEndDate     = (Date) contactRow.getAttribute("EffectiveEndDate");
            
            //immediately raise an error if the effectiveenddate is less than the effective start date
            java.sql.Date currDateSql  = DateConversionUtil.convertToJSDate(DateUtils.currentDateTruncated());
            java.sql.Date checkEndDate = DateConversionUtil.convertToJSDate(effectiveEndDate);
            java.sql.Date checkStartDate = DateConversionUtil.convertToJSDate(effectiveStartDate); 
            
            //if the end date is after the start date then set it to start date as cannot have an end
            //date less than a start date
             
            if (checkEndDate.after(checkStartDate)) {
              
            
            
                System.out.println("Effective Start Date is "+effectiveStartDate);
              //  java.sql.Date newEffDate = new java.sql.Date(effectiveStartDate);
                
                ViewCriteria vc = vo.getViewCriteria(viewCriteriaName);
                vo.removeViewCriteria(viewCriteriaName);
                vc.resetCriteria();
                vo.applyViewCriteria(vc);
                
                
                System.out.println("the parameters passed are as follows "+compIdNo);
              
                //set the where clause to find any contacts prior to this record so use the start date of the new record 
                // as a starting position
                vo.setNamedWhereClauseParam("pCompanyIdNo", compIdNo);
                vo.setNamedWhereClauseParam("pCompanyContactIdNo", 3);
              //  vo.setNamedWhereClauseParam("PCountryCode", countryCode);
                vo.setNamedWhereClauseParam("pCurrentDate", "");
                System.out.println("after setting where parms - for view criteria"+currentDate);
              //  vo.setSortBy("CompanyIdNo, CountryCode, CompanyContactTypeIdNo, EffectiveStartDate desc");
                vo.executeQuery();
               
               
                System.out.println("after execute view criteria");
                RowSetIterator rowIt = vo.createRowSetIterator(null);
                rowIt.reset();
    
              //  Date startDate = DateUtils.getLibertyMinDate();
                Integer companyIdNo = 0;
                String cntryCode = "";
                Integer contactTypeIdNo = 0;
                
                System.out.println("pre row check");
                while (rowIt.hasNext()) {
                   
                    CompanyContactCorrVORowImpl row = (CompanyContactCorrVORowImpl)rowIt.next();
                  //  Date endDate = row.getEffectiveEndDate();
                    java.sql.Date endDate = DateConversionUtil.convertToJSDate(row.getEffectiveEndDate());
                    Date startDate = row.getEffectiveStartDate();
                    Date newEndDate = DateUtils.getLibertyMaxDate();
                    
                    System.out.println("in the rows "+row.getCompanyIdNo().toString());
                    System.out.println("in the rows "+row.getCompanyContactTypeIdNo());
                    System.out.println("in the rows "+row.getCountryCode());
                    System.out.println("in the rows - contact name "+row.getContactName());
                    
                    System.out.println("in the rows "+companyIdNo.compareTo(row.getCompanyIdNo()));
                    System.out.println("in the rows "+cntryCode.compareTo(row.getCountryCode()));
                    System.out.println("in the rows "+contactTypeIdNo.compareTo(row.getCompanyContactTypeIdNo()));
                    
                    
                 /*   if (companyIdNo.compareTo(row.getCompanyIdNo()) != 0 || cntryCode.compareTo(row.getCountryCode()) != 0 ||
                        contactTypeIdNo.compareTo(row.getCompanyContactTypeIdNo()) != 0) {
                        row.setEffectiveEndDate(newEndDate);
                    } else if (endDate != newEndDate) {*/
                   
                    
                  if (startDate.equals(checkStartDate)) {
                      row.setEffectiveEndDate(effectiveEndDate);
                  } else if  (currDateSql.before(endDate)) {
                      System.out.println("new end date is "+DateConversionUtil.subtractDays(effectiveStartDate, 1));
                      row.setEffectiveEndDate(DateConversionUtil.subtractDays(effectiveStartDate, 1));
                           
                  }
                             
                
                    companyIdNo = row.getCompanyIdNo();
                    startDate = row.getEffectiveStartDate();
                    cntryCode = row.getCountryCode();
                    contactTypeIdNo = row.getCompanyContactTypeIdNo();
                }
                rowIt.closeRowSetIterator();
                this.getDBTransaction().commit();
                
                
                vo.removeViewCriteria(viewCriteriaName);
                vc.resetCriteria();
                vo.applyViewCriteria(vc);
                System.out.println("completed reset the iterator ");
                
                vo.setNamedWhereClauseParam("pCompanyIdNo", compIdNo);
              //  vo.setNamedWhereClauseParam("PCountryCode", countryCode);
            //    vo.setNamedWhereClauseParam("pCompanyContactIdNo", 3);
                vo.setNamedWhereClauseParam("pCurrentDate", currentDate);
                vo.executeQuery();
                
            } else {
                FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "The End Date must be after the start date!");
                fc.addMessage(null, message); 
            }
    }

    /**
     * Returns the variable value for pCompanyContactIdNo.
     * @return variable value for pCompanyContactIdNo
     */
    public Integer getpCompanyContactIdNo() {
        return (Integer) ensureVariableManager().getVariableValue("pCompanyContactIdNo");
    }

    /**
     * Sets <code>value</code> for variable pCompanyContactIdNo.
     * @param value value to bind as pCompanyContactIdNo
     */
    public void setpCompanyContactIdNo(Integer value) {
        ensureVariableManager().setVariableValue("pCompanyContactIdNo", value);
    }
}

