package com.liberty.health.comms.model.comms.services;

import com.core.model.services.classes.CoreApplicationModuleImpl;
import com.core.model.vo.classes.CoreViewObjectImpl;

import com.core.utils.DateConversionUtil;

import com.liberty.health.comms.lov.CommHubJobsLovViewImpl;
import com.liberty.health.comms.lov.GroupPerCountryLOVImpl;
import com.liberty.health.comms.lov.MedwareSchemesImpl;
import com.liberty.health.comms.model.brokerage.vo.CommsPartialReceiptVOImpl;
import com.liberty.health.comms.model.comms.services.common.CommsRunAM;
import com.liberty.health.comms.model.comms.views.AllJobsSubmittedRunDetailsVOImpl;
import com.liberty.health.comms.model.comms.views.CommsCalcCompareAllDetailVOImpl;
import com.liberty.health.comms.model.comms.views.CommsCalcCompareDetailVOImpl;
import com.liberty.health.comms.model.comms.views.CommsCalcCompareSummaryVOImpl;
import com.liberty.health.comms.model.comms.views.CommsCalcSnapShotDetailVOImpl;
import com.liberty.health.comms.model.comms.views.CommsCalcSnapShotLatestRunVOImpl;
import com.liberty.health.comms.model.comms.views.CommsCalcSnapShotSummaryVOImpl;
import com.liberty.health.comms.model.comms.views.CommsCalculationCompareRoViewImpl;

//import com.liberty.health.comms.model.comms.views.CommsDMCommsHistoryVOImpl;

import com.liberty.health.comms.model.comms.views.CommsDMInvoiceHistoryVOImpl;

import com.liberty.health.comms.model.comms.views.CommsDMInvoiceNoUpdateVOImpl;
import com.liberty.health.comms.model.comms.views.CommsDMJobSubmitImpl;


import com.liberty.health.comms.model.comms.views.CommsDMSnapshotHistoryVOImpl;
import com.liberty.health.comms.model.comms.views.CommsJobLogsVOImpl;
import com.liberty.health.comms.model.comms.views.CommsJobSubmitVOImpl;

import com.liberty.health.comms.model.comms.views.CommsPaymentsArchivedVOImpl;
import com.liberty.health.comms.model.comms.views.CommsPaymentsFailedVOImpl;

import com.liberty.health.comms.model.comms.views.CommsPreApprovalChecksVOImpl;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Calendar;

import oracle.jbo.JboException;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.server.ViewLinkImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 26 11:16:34 CAT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CommsRunAMImpl extends CoreApplicationModuleImpl implements CommsRunAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CommsRunAMImpl() {
    }

    /**
     * Container's getter for AllCommsPaymentsReceived.
     * @return AllCommsPaymentsReceived
     */
    public CoreViewObjectImpl getAllCommsPaymentsReceived() {
        return (CoreViewObjectImpl) findViewObject("AllCommsPaymentsReceived");
    }

    /**
     * Container's getter for AllCommissionRunCalculationView.
     * @return AllCommissionRunCalculationView
     */
    public CoreViewObjectImpl getAllCommissionRunCalculationView() {
        return (CoreViewObjectImpl) findViewObject("AllCommissionRunCalculationView");
    }
    
   
    

    public String executeCommissionRun(Integer companyIdNo, String countryCode, String groupCode, String product_code, String username, String parentgroupCode) {
        String sqlStmnt = null;
        CallableStatement cs = null;
        String result        = null;
        String newcompanyIdNo   = null;
        //int num_args         = 5;
        
        if (companyIdNo == null && countryCode == null && product_code == null && parentgroupCode == null) {
            return "Please populate at least one parameter.";
        }
        
        
        if (companyIdNo != null) {
            newcompanyIdNo = Integer.toString(companyIdNo);
        } else {
            newcompanyIdNo = "";
        }
        if (countryCode == null) {
            System.out.println("setting country code to emptystring");
            countryCode = "";
        }
        if (groupCode == null) {
            groupCode = "";
            System.out.println("setting groupCode to emptystring");
        }
        if (product_code == null) {
            product_code = "";
            System.out.println("setting product_code to emptystring");
        }    
        if (username == null) {
            username = "";
            System.out.println("setting username to emptystring");
        }
        if (parentgroupCode == null) {
            parentgroupCode = "";
            System.out.println("setting parentgroupCode to emptystring");
        }
        
        System.out.println("values are "+"LHHCOM.comms_calc_pkg.COMMISSIONS_CALC_RUN("
                                +"\'"+newcompanyIdNo+"\'"+","
                                +"\'"+countryCode+"\'"+","
                                +"\'"+parentgroupCode+"\'"+","
                                +"\'"+product_code+"\'"+","
                                +"\'"+username+"\'"+")");
        System.out.println("after showing values now calling relevant create job");
        java.sql.Date currDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
        String jobName         = "COMMISSIONS_CALC_RUN";

        /*create the job */
        this.createJob(jobName, "PLSQL_BLOCK", 
                                 "BEGIN LHHCOM.comms_calc_pkg.COMMISSIONS_CALC_RUN("
                                            +"\'"+newcompanyIdNo+"\'"+","
                                            +"\'"+countryCode+"\'"+","
                                            +"\'"+parentgroupCode+"\'"+","
                                            +"\'"+product_code+"\'"+","
                                            +"\'"+username+"\'"+");END;",
                                 currDate, 0, "Submitting job for Commissions Calc Run");       
                
     
        
          this.enableDbJob(jobName); 
          
          return result;
        }
        

    public String approveCommissionRun(Integer companyIdNo, String countryCode, String consultantUsername, 
                                       String groupCode, String product_code, String username, String parentgroupCode) {
        String sqlStmnt = null;
        CallableStatement cs = null;
        String result = null;
        String newcompanyIdNo   = null;
        //int num_args         = 5;
        
        if (companyIdNo == null && countryCode == null && groupCode == null && product_code == null) {
            return "Please populate at least one parameter.";
        }
        
        
        if (companyIdNo != null) {
            newcompanyIdNo = Integer.toString(companyIdNo);
        } else {
            newcompanyIdNo = "";
        }
        if (countryCode == null) {
            System.out.println("setting country code to emptystring");
            countryCode = "";
        }
        if (groupCode == null) {
            groupCode = "";
            System.out.println("setting groupCode to emptystring");
        }
        if (product_code == null) {
            product_code = "";
            System.out.println("setting product_code to emptystring");
        }    
        if (username == null) {
            username = "";
            System.out.println("setting username to emptystring");
        }
        if (consultantUsername == null) {
            consultantUsername = "";
        }
        if(countryCode.equalsIgnoreCase("KE") && parentgroupCode != null){
            groupCode = parentgroupCode;
            System.out.println("groupcode as parent for KE: "+groupCode);
        }
        
        System.out.println("values are "+"LHHCOM.comms_calc_pkg.APPROVE_COMMS_RUN("
                                +"\'"+newcompanyIdNo+"\'"+","
                                +"\'"+countryCode+"\'"+","
                                +"\'"+consultantUsername+"\'"+","
                                +"\'"+groupCode+"\'"+","
                                +"\'"+product_code+"\'"+","
                                +"\'"+username+"\'"+")");
        System.out.println("after showing values now calling relevant create job");
        java.sql.Date currDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
        String jobName         = "COMMISSIONS_CALC_RUN";

        /*create the job */
        this.createJob(jobName, "PLSQL_BLOCK", 
                                 "BEGIN LHHCOM.comms_calc_pkg.APPROVE_COMMS_RUN("
                                            +"\'"+newcompanyIdNo+"\'"+","
                                            +"\'"+countryCode+"\'"+","
                                            +"\'"+consultantUsername+"\'"+","
                                            +"\'"+groupCode+"\'"+","
                                            +"\'"+product_code+"\'"+","
                                            +"\'"+username+"\'"+");END;",
                                 currDate, 0, "Submitting job for Approving the Comms Run");       
                
        
        
          this.enableDbJob(jobName); 
        
       /* try {
            sqlStmnt =
                "BEGIN LHHCOM.comms_calc_pkg.APPROVE_COMMS_RUN (PN_COMPANY_ID_NO =>?, PV_COUNTRY_CODE =>?, PV_COMMS_CONSULTANT =>?, PV_GROUP_CODE =>?, PV_PRODUCT_CODE =>?, PV_USERNAME =>?, PV_RETURN_MSG =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            //Set procedure paramaters
            if (companyIdNo != null) {
                cs.setInt(1, companyIdNo.intValue());
            } else {
                cs.setString(1, null);
            }
            if (countryCode != null) {
                cs.setString(2, countryCode);
            } else {
                cs.setString(2, null);
            }

            if (consultantUsername != null) {
                cs.setString(3, consultantUsername);
            } else {
                cs.setString(3, null);
            }
            
            if (groupCode != null) {
                cs.setString(4, groupCode);
            } else {
                cs.setString(4, null);
            }

            if (product_code != null) {
                cs.setString(5, product_code);
            } else {
                cs.setString(5, null);
            }
            
            cs.setString(6, username);
            //Register out parameters
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.execute();
            result = cs.getString(7);
        } catch (SQLException e) {
            e.printStackTrace();
            e.getLocalizedMessage();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }*/
        return result;
    }
    
    public void executeScheduledJob(String jobName) {
        this.runJob(jobName);
    }
    
    public void executeApproveDMRun(String StageNo, String countryCode, String userName) {
        java.sql.Date currDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
       this.executeDmJob(StageNo, "N", currDate,countryCode, null,null, userName, "Y"); 
        
    }
    
    public void executeDmJob(String stage, String preLoad, Date commRunDate,
                                         String countryCode, String scheme, String group , String username, String approve) {
        System.out.println("stage =" + stage + ", preLoad=" + preLoad + ",commRunDate  =" +
                           commRunDate + ",  countryCode =" + countryCode + ", scheme, =" + scheme +
                           ",  username =" + username);
        java.sql.Date currDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
        
        int  jobId;
        String jobName       = "DATA_MIGRATION"+"_"+countryCode;
        String sqlStmnt      = null;
        CallableStatement cs = null;
        int stageInt         = Integer.parseInt(stage.substring(0, 1))     ;
        int num_args         = 9;

        
        System.out.println("before execute create job");
        System.out.println("stage    ="+stage);
        System.out.println("currDate ="+currDate);
        /*get unique seq for job */
        jobId   = getJobSeq();
       // jobName = jobName +jobId;
        
      //  System.out.println("The job sequence generated is "+jobId);
        System.out.println("The job name generated is "+jobName);
        
        /*create the job */
        this.createJob(jobName, "STORED_PROCEDURE", "COMMISSIONS_DM_PKG.MIGRATE_FROM_MEDWARE", 
                       currDate, 9, "Submitting job for Data Migration Load");
       
     
        /*add the arguments -- cannot be made into public class as arguments passed vary*/
        
        sqlStmnt      = null;
        cs = null; 
        System.out.println("before execute add job arguments");
        for (int cnt=1; cnt<=num_args; cnt++) {
            
            try {
                sqlStmnt =
                    "BEGIN LHHCOM.commissions_pkg.add_job_arguments (p_job_name =>?, p_argument_position =>?, p_argument_char =>?, p_argument_num =>?, p_argument_date =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
   
                
            cs.setString(1, jobName); 
            cs.setInt(2, cnt);
                
                
           // System.out.println("found the int value - value is "+cnt);    
            if (cnt == 1) {
                  
                    cs.setString(5, null);
                    cs.setString(3, null);
                    cs.setInt(4, stageInt);
                } else if (cnt == 2) {
                    cs.setString(5, null);
                    cs.setString(4, null);
                    cs.setString(3, preLoad);
                } else if (cnt == 3) {
                    cs.setString(3, null);
                    cs.setString(4, null);
                    cs.setDate(5, commRunDate);
                } else if(cnt == 4) {
                    cs.setString(3, countryCode);
                    cs.setString(5, null);
                    cs.setString(4, null);
                } else if(cnt == 5) {
                    cs.setString(3, group);
                    cs.setString(5, null);
                    cs.setString(4, null);
                } else if(cnt == 6) {
                    cs.setString(3, scheme);
                    cs.setString(5, null);
                    cs.setString(4, null);    
                } else if(cnt == 7) {
                    cs.setString(3, username);
                    cs.setString(5, null);
                    cs.setString(4, null);
                } else if (cnt == 8) {
                    cs.setString(3, approve);
                    cs.setString(5, null);
                    cs.setString(4, null);
                } else if (cnt == 9) {
                    cs.setString(3, null);
                    cs.setString(5, null);
                    cs.setInt(4, jobId);
                }    
                
                   
            cs.execute();
        
        } catch (SQLException e) {
            e.printStackTrace();
            e.getLocalizedMessage();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
      } 
        
       this.enableDbJob(jobName); 
      
        
       System.out.println("before return message "+jobName); 
   //   return "hEY";
    }
    
    public void submitFusionPayablesImport (
                                           ) {
            java.sql.Date currDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
            String jobName         = "PROCESS_FUSION_PAYABLES";
            
            /*create the job */
            this.createJob(jobName, "PLSQL_BLOCK", 
                                     "BEGIN LHHCOM.COMMISSIONS_PKG.process_fusion_payables;END;",
                                     currDate, 0, "Submitting job for Fusion Payables Import Payables");       
                    
            
            
              this.enableDbJob(jobName); 
        }
    
    public int getJobSeq() {
        String sqlStmnt      = null;
        CallableStatement cs = null; 
        int jobId = 0;
        try {
            sqlStmnt =
                "select lhhcom.commissions_job_id.nextval from dual";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            ResultSet rs = cs.executeQuery();
            if (rs.next()) {
                jobId = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            e.getLocalizedMessage();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }    
        return jobId;
    }
    
    

    
    public void createJob(String jobName, String jobType, String jobAction, Date startDate, int numArguments, String comments) {
        /*first create the job */
        String sqlStmnt      = null;
        CallableStatement cs = null; 
        try {
            sqlStmnt =
                "BEGIN LHHCOM.commissions_pkg.create_job (p_job_name =>?, p_job_type =>?, p_job_action =>?, p_start_date =>?,p_no_arguments =>?, p_comments =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            cs.setString(1, jobName);
            cs.setString(2, jobType);
            cs.setString(3, jobAction);
            cs.setDate(4, startDate);
            cs.setInt(5, numArguments);
            cs.setString(6, comments);
            
            cs.execute();
            
            } catch (SQLException e) {
                e.printStackTrace();
                e.getLocalizedMessage();
            } finally {
                if (cs != null) {
                    try {
                        cs.close();
                    } catch (SQLException e) {
                        throw new JboException(e);
                    }
                }
            }
    }
    
    public void enableDbJob (String jobName){
        String sqlStmnt      = null;
        CallableStatement cs = null; 
        
        System.out.println("before execute enable job "+jobName);
        try {
            sqlStmnt =
                "BEGIN LHHCOM.commissions_pkg.enable_job (p_job_name =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            cs.setString(1, jobName);   
            cs.execute();
        
        } catch (SQLException e) {
        e.printStackTrace();
        e.getLocalizedMessage();
        } finally {
        if (cs != null) {
            try {
                cs.close();
            } catch (SQLException e) {
                throw new JboException(e);
            }
        }
        }
  }
    
    public void runJob(String jobName) {
        String sqlStmnt      = null;
        CallableStatement cs = null; 
        
        System.out.println("before execute enable job "+jobName);
        try {
            sqlStmnt =
                "BEGIN LHHCOM.commissions_pkg.run_job (p_job_name =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            cs.setString(1, jobName);   
            cs.execute();
        
        } catch (SQLException e) {
        e.printStackTrace();
        e.getLocalizedMessage();
        } finally {
        if (cs != null) {
            try {
                cs.close();
            } catch (SQLException e) {
                throw new JboException(e);
            }
        }
        }
    }
    
    public BlobDomain getFile(String fileName) {
        String sqlStmnt      = null;
        CallableStatement cs = null; 
        BlobDomain blob      = new BlobDomain();
        int jobId = 0;
        try {
            sqlStmnt =
                "BEGIN LHHCOM.commissions_pkg.get_file (p_file_name =>?, p_output =>?); END;";
            cs = this.getDBTransaction().createCallableStatement(sqlStmnt, this.getDBTransaction().DEFAULT);
            cs.setString(1, fileName);
            cs.registerOutParameter(2, Types.BLOB);
            cs.execute();
            blob = new BlobDomain((java.sql.Blob)cs.getBlob(2));
        } catch (SQLException e) {
            e.printStackTrace();
            e.getLocalizedMessage();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }    
        return blob; 
    }

    /**
     * Container's getter for SearchCommsRunRoView1.
     * @return SearchCommsRunRoView1
     */
    public CoreViewObjectImpl getSearchCommsRunRoView() {
        return (CoreViewObjectImpl) findViewObject("SearchCommsRunRoView");
    }

    /**
     * Container's getter for CommsCalculationCompareRoView1.
     * @return CommsCalculationCompareRoView1
     */
    public CommsCalculationCompareRoViewImpl getCurrentCommsRunCompareView() {
        return (CommsCalculationCompareRoViewImpl) findViewObject("CurrentCommsRunCompareView");
    }


    /**
     * Container's getter for CommsCalcSnapShotSummaryVO1.
     * @return CommsCalcSnapShotSummaryVO1
     */
    public CommsCalcSnapShotSummaryVOImpl getCommsCalcSnapShotSummaryVO1() {
        return (CommsCalcSnapShotSummaryVOImpl) findViewObject("CommsCalcSnapShotSummaryVO1");
    }


    /**
     * Container's getter for CommsCalcSnapShotDetailVO1.
     * @return CommsCalcSnapShotDetailVO1
     */
    public CommsCalcSnapShotDetailVOImpl getCommsCalcSnapShotDetailVO1() {
        return (CommsCalcSnapShotDetailVOImpl) findViewObject("CommsCalcSnapShotDetailVO1");
    }


    /**
     * Container's getter for CommsCalcCompareAllDetail1.
     * @return CommsCalcCompareAllDetail1
     */
    public CommsCalcCompareAllDetailVOImpl getCommsCalcCompareAllDetailVO1() {
        return (CommsCalcCompareAllDetailVOImpl) findViewObject("CommsCalcCompareAllDetailVO1");
    }

    /**
     * Container's getter for CommsCalcCompareSummaryVO1.
     * @return CommsCalcCompareSummaryVO1
     */
    public CommsCalcCompareSummaryVOImpl getCommsCalcCompareSummaryVO1() {
        return (CommsCalcCompareSummaryVOImpl) findViewObject("CommsCalcCompareSummaryVO1");
    }

    /**
     * Container's getter for CommsCalcCompareDetailVO1.
     * @return CommsCalcCompareDetailVO1
     */
    public CommsCalcCompareDetailVOImpl getCommsCalcCompareDetailVO1() {
        return (CommsCalcCompareDetailVOImpl) findViewObject("CommsCalcCompareDetailVO1");
    }

    /**
     * Container's getter for CommsCalcCompareSummDetailVL1.
     * @return CommsCalcCompareSummDetailVL1
     */
    public ViewLinkImpl getCommsCalcCompareSummDetailVL1() {
        return (ViewLinkImpl) findViewLink("CommsCalcCompareSummDetailVL1");
    }

    /**
     * Container's getter for CommsDMCommsHistory1.
     * @return CommsDMCommsHistory1
     */
  /*  public CommsDMCommsHistoryVOImpl getCommsDMCommsHistoryVO1() {
        return (CommsDMCommsHistoryVOImpl) findViewObject("CommsDMCommsHistoryVO1");
    }*/

    /**
     * Container's getter for CommsDMInvoiceHistory1.
     * @return CommsDMInvoiceHistory1
     */
    public CommsDMInvoiceHistoryVOImpl getCommsDMInvoiceHistoryVO1() {
        return (CommsDMInvoiceHistoryVOImpl) findViewObject("CommsDMInvoiceHistoryVO1");
    }

    /**
     * Container's getter for CommsDMJobSubmit1.
     * @return CommsDMJobSubmit1
     */
    public CommsDMJobSubmitImpl getCommsDMJobSubmit1() {
        return (CommsDMJobSubmitImpl) findViewObject("CommsDMJobSubmit1");
    }


    /**
     * Container's getter for CommsJobSubmitVO1.
     * @return CommsJobSubmitVO1
     */
    public CommsJobSubmitVOImpl getCommsJobSubmitVO1() {
        return (CommsJobSubmitVOImpl) findViewObject("CommsJobSubmitVO1");
    }

    /**
     * Container's getter for MedwareSchemes1.
     * @return MedwareSchemes1
     */
    public MedwareSchemesImpl getMedwareSchemesVO1() {
        return (MedwareSchemesImpl) findViewObject("MedwareSchemesVO1");
    }

    /**
     * Container's getter for AllJobsSubmittedRunDetails1.
     * @return AllJobsSubmittedRunDetails1
     */
    public AllJobsSubmittedRunDetailsVOImpl getAllJobsSubmittedRunDetailsVO1() {
        return (AllJobsSubmittedRunDetailsVOImpl) findViewObject("AllJobsSubmittedRunDetailsVO1");
    }

    /**
     * Container's getter for CommsJobLogs1.
     * @return CommsJobLogs1
     */
    public CommsJobLogsVOImpl getCommsJobLogs1() {
        return (CommsJobLogsVOImpl) findViewObject("CommsJobLogs1");
    }


    /**
     * Container's getter for CommsDMInvoiceNoUpdate1.
     * @return CommsDMInvoiceNoUpdate1
     */
    public CommsDMInvoiceNoUpdateVOImpl getCommsDMInvoiceNoUpdateVO1() {
        return (CommsDMInvoiceNoUpdateVOImpl) findViewObject("CommsDMInvoiceNoUpdateVO1");
    }

    /**
     * Container's getter for CommsPaymentsFailed1.
     * @return CommsPaymentsFailed1
     */
    public CommsPaymentsFailedVOImpl getAllCommsPaymentsFailedVO1() {
        return (CommsPaymentsFailedVOImpl) findViewObject("AllCommsPaymentsFailedVO1");
    }

    /**
     * Container's getter for CommsPaymentsArchivedVO1.
     * @return CommsPaymentsArchivedVO1
     */
    public CommsPaymentsArchivedVOImpl getCommsPaymentsArchivedVO1() {
        return (CommsPaymentsArchivedVOImpl) findViewObject("CommsPaymentsArchivedVO1");
    }

    /**
     * Container's getter for CommsPartialReceiptVO1.
     * @return CommsPartialReceiptVO1
     */
    public CommsPartialReceiptVOImpl getCommsPartialReceiptVO1() {
        return (CommsPartialReceiptVOImpl) findViewObject("CommsPartialReceiptVO1");
    }

    /**
     * Container's getter for CommsPreApprovalChecks1.
     * @return CommsPreApprovalChecks1
     */
    public CommsPreApprovalChecksVOImpl getCommsPreApprovalChecks1() {
        return (CommsPreApprovalChecksVOImpl) findViewObject("CommsPreApprovalChecks1");
    }

    /**
     * Container's getter for GroupPerCountryLOV1.
     * @return GroupPerCountryLOV1
     */
    public GroupPerCountryLOVImpl getGroupPerCountryLOV1() {
        return (GroupPerCountryLOVImpl) findViewObject("GroupPerCountryLOV1");
    }

    /**
     * Container's getter for CommsDMSnapshotHistoryVO1.
     * @return CommsDMSnapshotHistoryVO1
     */
    public CommsDMSnapshotHistoryVOImpl getCommsDMSnapshotHistoryVO1() {
        return (CommsDMSnapshotHistoryVOImpl) findViewObject("CommsDMSnapshotHistoryVO1");
    }

    /**
     * Container's getter for CommsCalcSnapShotLatestRun1.
     * @return CommsCalcSnapShotLatestRun1
     */
    public CommsCalcSnapShotLatestRunVOImpl getCommsCalcSnapShotLatestRun1() {
        return (CommsCalcSnapShotLatestRunVOImpl) findViewObject("CommsCalcSnapShotLatestRun1");
    }

    /**
     * Container's getter for CommissionAccurals1.
     * @return CommissionAccurals1
     */
    public CoreViewObjectImpl getCommissionAccurals1() {
        return (CoreViewObjectImpl) findViewObject("CommissionAccurals1");
    }
}
