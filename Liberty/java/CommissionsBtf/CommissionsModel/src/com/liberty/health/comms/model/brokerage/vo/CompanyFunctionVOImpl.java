package com.liberty.health.comms.model.brokerage.vo;

import com.core.model.vo.classes.CoreViewObjectImpl;
import com.core.utils.DateUtils;
import com.core.utils.DateConversionUtil;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.domain.Date;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 15 10:21:31 CAT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CompanyFunctionVOImpl extends CoreViewObjectImpl implements com.liberty.health.comms.model.brokerage.vo.common.CompanyFunctionVO {
    /**
     * This is the default constructor (do not remove).
     */
    public CompanyFunctionVOImpl() {
    }


    /**
     * Returns the variable value for pCompanyIdNo.
     * @return variable value for pCompanyIdNo
     */
    public Integer getpCompanyIdNo() {
        return (Integer) ensureVariableManager().getVariableValue("pCompanyIdNo");
    }

    /**
     * Sets <code>value</code> for variable pCompanyIdNo.
     * @param value value to bind as pCompanyIdNo
     */
    public void setpCompanyIdNo(Integer value) {
        ensureVariableManager().setVariableValue("pCompanyIdNo", value);
        this.executeQuery();
    }


    public void updateEffDates(Integer compIdNo, Integer compTableIdNo, Timestamp currentDate) {
        FacesContext fc = FacesContext.getCurrentInstance();
        String viewCriteriaName = "CurrentCompanyRecordViewCriteria";
        CompanyFunctionVOImpl vo = (CompanyFunctionVOImpl) this.getViewObject();
        Row functionRow            = vo.getCurrentRow();
        System.out.println("functionRow: "+functionRow);
        if(functionRow!=null){
            Date effectiveStartDate   = (Date) functionRow.getAttribute("EffectiveStartDate");
            System.out.println("effectiveStartDate: "+effectiveStartDate);
            Date effectiveEndDate     = (Date) functionRow.getAttribute("EffectiveEndDate");
            System.out.println("effectiveEndDate: "+effectiveEndDate);
            Integer currTableIdNo     = (Integer) functionRow.getAttribute("CompanyTableIdNo");
            System.out.println("currTableIdNo: "+currTableIdNo);
            //added check for the broker table type id cannot be set to 0
                    // raise error if any of the rows evaluate to 0 and do not allow the save       
            if (currTableIdNo == 0) {
                FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "Please ensure that the Table Description is valid");
                fc.addMessage(null, message);  
            } else      
                {
                    ViewCriteria vc = vo.getViewCriteria(viewCriteriaName);
                    vo.removeViewCriteria(viewCriteriaName);
                    vc.resetCriteria();
                    vo.applyViewCriteria(vc);
                    vo.setNamedWhereClauseParam("pCompanyIdNo", compIdNo);
                    vo.setNamedWhereClauseParam("pCompanyTableIdNo", compTableIdNo);
                    vo.setNamedWhereClauseParam("pCurrentDate", "");
                    vo.setSortBy("CompanyIdNo, CompanyTableIdNo, EffectiveStartDate desc");
                    vo.executeQuery();
                    RowSetIterator rowIt = vo.createRowSetIterator(null);
                    rowIt.reset();
                    //Timestamp startDateTime = new Timestamp(System.currentTimeMillis());
                    Date startDateTime = DateUtils.getLibertyMinDate();
                    Integer companyIdNo = 0;
                    Integer companyTableIdNo = 0;
                    while (rowIt.hasNext()) {
                        CompanyFunctionVORowImpl row = (CompanyFunctionVORowImpl) rowIt.next();
                        System.out.println("Row "+row.getCompanyIdNo()+","+row.getCompanyTableIdNo()+","+row.getCompanyTableTypeIdNo());
                        System.out.println("Row - in new effective date section existing company table id no "+row.getCompanyTableIdNo().toString());
                        if (row.getCompanyTableTypeIdNo() == 0) {
                          FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", "Please ensure that the Table Description is valid");
                          fc.addMessage(null, message);    
                        } else   
                            {
                                Date endDate = row.getEffectiveEndDate();
                                Date newEndDate = DateUtils.getLibertyMaxDate();
                                //check the effective start date and the companytableidno
                                System.out.println("Row - in new effective date section existing company table id no "+row.getCompanyTableIdNo().toString());
                                System.out.println("Row - in new effective date section existing company table id no "+currTableIdNo.toString());
                                if (row.getCompanyTableIdNo().equals(currTableIdNo)) {
                                    //if the effective start date is the same then this is the new record
                                    if (row.getEffectiveStartDate().equals(effectiveStartDate)) {
                                        System.out.println("this is a new record update the end date");
                                        System.out.println("Be4, row.getEffectiveStartDate(): "+row.getEffectiveStartDate());
                                        row.setEffectiveEndDate(newEndDate);
                                        System.out.println("Aft, row.getEffectiveStartDate(): "+row.getEffectiveStartDate());
                                    } else {
                                        System.out.println("setting the effective end date for the prior record");
                                        System.out.println("Be4, row.setEffectiveEndDate(): "+row.getEffectiveEndDate());
                                        row.setEffectiveEndDate(DateConversionUtil.subtractDays(effectiveStartDate, 1));
                                        System.out.println("Aft, row.setEffectiveEndDate(): "+row.getEffectiveEndDate());
                                        break;
                                    }                   
                                }
                                companyIdNo = row.getCompanyIdNo();
                                companyTableIdNo = row.getCompanyTableIdNo();
                                startDateTime = row.getEffectiveStartDate();
                            }
                        
                    }
                    rowIt.closeRowSetIterator();
                    this.getDBTransaction().commit();
                    vo.removeViewCriteria(viewCriteriaName);
                    vc.resetCriteria();
                    vo.applyViewCriteria(vc);
                    vo.setNamedWhereClauseParam("pCompanyIdNo", compIdNo);
                    vo.setNamedWhereClauseParam("pCompanyTableIdNo", null);
                    vo.setNamedWhereClauseParam("pCurrentDate", currentDate);
                    vo.executeQuery();
            }
        }
        
    }


    /**
     * Returns the variable value for pCompanyTableIdNo.
     * @return variable value for pCompanyTableIdNo
     */
    public Integer getpCompanyTableIdNo() {
        return (Integer) ensureVariableManager().getVariableValue("pCompanyTableIdNo");
    }

    /**
     * Sets <code>value</code> for variable pCompanyTableIdNo.
     * @param value value to bind as pCompanyTableIdNo
     */
    public void setpCompanyTableIdNo(Integer value) {
        ensureVariableManager().setVariableValue("pCompanyTableIdNo", value);
    }

    /**
     * Returns the variable value for pCurrentDate.
     * @return variable value for pCurrentDate
     */
    public Timestamp getpCurrentDate() {
        return (Timestamp) ensureVariableManager().getVariableValue("pCurrentDate");
    }

    /**
     * Sets <code>value</code> for variable pCurrentDate.
     * @param value value to bind as pCurrentDate
     */
    public void setpCurrentDate(Timestamp value) {
        ensureVariableManager().setVariableValue("pCurrentDate", value);
    }
}

